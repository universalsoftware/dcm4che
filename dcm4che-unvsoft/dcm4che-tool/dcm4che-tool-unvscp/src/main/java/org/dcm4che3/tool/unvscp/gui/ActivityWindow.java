
package org.dcm4che3.tool.unvscp.gui;

import java.net.URL;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumnModel;
import org.dcm4che3.tool.unvscp.tasks.SenderTaskListener;

/**
 *
 * @author Pavel Varzinov <varzinov@yandex.ru>
 */
public class ActivityWindow extends javax.swing.JFrame implements SenderTaskListener {

    /**
     * Creates new form ActivityWindow
     */
    public ActivityWindow() {
        initComponents();

        TableColumnModel tcm = activityTable.getColumnModel();
        if (tcm.getColumnCount() > 0) {
            // Column 0 is Date of Service
            tcm.getColumn(0).setMinWidth(95);
            tcm.getColumn(0).setPreferredWidth(95);
            tcm.getColumn(0).setMaxWidth(120);
            tcm.getColumn(0).setCellRenderer(new DateCellRenderer());
            // Column 1 is Patient Name
            tcm.getColumn(1).setMinWidth(150);
            tcm.getColumn(1).setPreferredWidth(350);
            tcm.getColumn(1).setMaxWidth(350);
            // Column 2 is Date of Birth
            tcm.getColumn(2).setMinWidth(95);
            tcm.getColumn(2).setPreferredWidth(95);
            tcm.getColumn(2).setMaxWidth(120);
            tcm.getColumn(2).setCellRenderer(new DateCellRenderer());
            // Column 3 is Study Description
            tcm.getColumn(3).setMinWidth(85);
            tcm.getColumn(3).setPreferredWidth(150);
            tcm.getColumn(3).setMaxWidth(250);
            // Column 4 is Images
            tcm.getColumn(4).setMinWidth(82);
            tcm.getColumn(4).setPreferredWidth(82);
            tcm.getColumn(4).setMaxWidth(105);
            tcm.getColumn(4).setCellRenderer(new ImagesCellRenderer());
            // Column 5 is Status
            tcm.getColumn(5).setMinWidth(80);
            tcm.getColumn(5).setMaxWidth(80);
            tcm.getColumn(5).setCellRenderer(new StatusCellRenderer());
            // Column 6 is Progress
            tcm.getColumn(6).setMinWidth(73);
            tcm.getColumn(6).setPreferredWidth(300);
            tcm.getColumn(6).setCellRenderer(new ProgressCellRenderer());
            tcm.removeColumn(tcm.getColumn(tcm.getColumnCount() - 1));
            tcm.removeColumn(tcm.getColumn(tcm.getColumnCount() - 1));
            tcm.removeColumn(tcm.getColumn(tcm.getColumnCount() - 1));
        }

        /* Setting the window icon */
        URL imgUrl = getClass().getClassLoader().getResource("org/dcm4che3/tool/unvscp/icons/icon.png");
        if (imgUrl != null) {
            setIconImage(new ImageIcon(imgUrl).getImage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tableScroll = new javax.swing.JScrollPane();
        activityTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("EMSOW Bridge");
        setPreferredSize(new java.awt.Dimension(700, 525));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        activityTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        activityTable.setModel(new ActivityTableModel());
        activityTable.setRowHeight(24);
        tableScroll.setViewportView(activityTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tableScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tableScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (((ActivityTableModel)activityTable.getModel()).isSendingInProgress()) {
            int res = JOptionPane.showConfirmDialog(
                this,
                "Some tasks are in progress.\nAre you sure you want to quit?",
                "Confirmation",
                JOptionPane.YES_NO_OPTION
            );
            if (res == JOptionPane.YES_OPTION) {
                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
            }
        } else {
            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        }
    }//GEN-LAST:event_formWindowClosing

    @Override
    public void onAddNewFile(String sopInstanceUid, String studyInstanceUid,
        Date studyDate, String studyDescription,
        String patientName, Date patientDob) {

        ((ActivityTableModel)activityTable.getModel()).insertUpdate(
            sopInstanceUid,
            studyInstanceUid,
            studyDate,
            studyDescription,
            patientName,
            patientDob
        );
    }

    @Override
    public void onStartProcessingFile(String sopInstanceUid) {
        ((ActivityTableModel)activityTable.getModel()).markGroupAsSending(sopInstanceUid);
    }

    @Override
    public void onFinishProcessingFile(String sopInstanceUid, String errMsg) {
       ((ActivityTableModel)activityTable.getModel()).transferProcessUpdate(sopInstanceUid, errMsg);
    }

    @Override
    public void onFinishProcessingBatch() {
        ((ActivityTableModel)activityTable.getModel()).showSummary();
    }

    public static ActivityWindow launch() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ActivityWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ActivityWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ActivityWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ActivityWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        ActivityWindowLauncher windowLauncher = new ActivityWindowLauncher();
        java.awt.EventQueue.invokeLater(windowLauncher);
        return windowLauncher.getActivityWindow();
    }

    private static class ActivityWindowLauncher implements Runnable {
        private ActivityWindow activityWindow;
        @Override
        public synchronized void run() {
            activityWindow = new ActivityWindow();
            activityWindow.setVisible(true);
            this.notify();
        }
        public synchronized ActivityWindow getActivityWindow() {
            if (activityWindow == null) {
                try {
                    this.wait();
                } catch (InterruptedException ie) {}
            }
            return activityWindow;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable activityTable;
    private javax.swing.JScrollPane tableScroll;
    // End of variables declaration//GEN-END:variables
}
